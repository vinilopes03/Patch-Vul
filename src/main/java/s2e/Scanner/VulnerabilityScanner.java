package s2e.Scanner;

import s2e.PatchGenerator.ToJson;
import s2e.PatternAnalyzer.*;
import com.github.javaparser.JavaParser;
import com.github.javaparser.ParseResult;
import com.github.javaparser.ast.CompilationUnit;

import com.google.gson.*;

import java.io.File;
import java.io.FileWriter;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import s2e.WalaAnalyzer.WalaAnalyzer;

public class VulnerabilityScanner {
    private final PatternLoader loader;
    private final PatternMatcher matcher;
    private final List<ToJson> findings = new java.util.ArrayList<>();

    public VulnerabilityScanner(String patternPath) throws Exception {
        loader = new PatternLoader(patternPath);
        matcher = new PatternMatcher();
    }

    // ==== UPDATED METHOD SIGNATURE ====
    public void scan(String filePath, String classDir, List<String> classDirs, List<String> jarPaths) throws Exception {
        File file = new File(filePath);
        JavaParser parser = new JavaParser();
        ParseResult<CompilationUnit> result = parser.parse(file);

        if (!result.isSuccessful() || !result.getResult().isPresent()) {
            System.out.println("Failed to parse the Java file.");
            return;
        }
        CompilationUnit cu = result.getResult().get();
        JsonObject patterns = loader.getPatterns();

        // ---- AST pattern matching (unchanged) ----
        for (Map.Entry<String, JsonElement> entry : patterns.entrySet()) {
            String cweId = entry.getKey();
            JsonObject cweObj = entry.getValue().getAsJsonObject();
            if (!cweObj.has("ast_patterns")) continue;
            JsonArray astPatterns = cweObj.getAsJsonArray("ast_patterns");
            for (JsonElement patEl : astPatterns) {
                JsonObject pattern = patEl.getAsJsonObject();
                cu.walk(node -> {
                    if (matcher.matchesPattern(node, pattern)) {
                        int line = node.getRange().map(r -> r.begin.line).orElse(-1);
                        System.out.println("Vulnerability found: " + cweId +
                                " (" + pattern.get("node_type").getAsString() + ") at line " + line);
                        findings.add(new ToJson(filePath, line, cweId));
                    }
                });
            }
        }

        // ---- Add WALA taint analysis for CWE-15, if present ----
        if (patterns.has("CWE-15") && classDir != null) {
            // Pass both classDirs and jarPaths!
            List<WalaAnalyzer.TaintResult> taintFindings =
                    WalaAnalyzer.analyzeTaint(classDir, classDirs, jarPaths);
            for (WalaAnalyzer.TaintResult tf : taintFindings) {
                int line = tf.line != null ? tf.line : -1;
                findings.add(new ToJson(tf.file, line, "CWE-15"));
                System.out.println("Vulnerability found (WALA taint): CWE-15 in " + tf.file + " at line " + line);
            }
        }
    }

    public static void exportFindingsToJson(List<ToJson> findings, String outputPath) {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try (FileWriter writer = new FileWriter(outputPath)) {
            gson.toJson(findings, writer);
            System.out.println("Exported results to " + outputPath);
        } catch (Exception e) {
            System.out.println("Error writing JSON: " + e.getMessage());
        }
    }

    public java.util.List<ToJson> getFindings() {
        return findings;
    }
}